apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: idec-image-builds
  namespace: idec
spec:
  description: |
    This pipeline clones a git repo, then echoes the README file to the stdout.
  params:
    - name: repo-url
      type: string
      description: The git repo URL to clone from.
    - name: base
      description: version Base to query Git tags for (e.g., v2.1.*)
      type: string
    - name: gitrevision
      description: git revision to checkout
    - name: image
      description: image to use for the git-next-tag task
      type: string
      default: ghcr.io/joostvdg/git-next-tag:0.5.4-alpine
    - name: dockerfile
      description: dockerfile to use for the kaniko task
      type: string
      default: Dockerfile
    - name: registry
      description: registry to push to
      type: string
      default: ghcr.io
    - name: repo
      description: repo to push to
      type: string
      default: joostvdg/idec
    - name: tag
      description: tag to push to
      type: string
      default: latest
    - name: commit_message
      type: string
      description: The commit message of the git commit that triggered this pipeline.
      default: "N/A"
    - name: commit_author
      type: string
      default: "N/A"
      description: The author of the git commit that triggered this pipeline.
    - name: commit_author_email
      type: string
      description: The email of the author of the git commit that triggered this pipeline.
      default: "N/A"
    - name: commit_timestamp
      type: string
      description: The timestamp of the git commit that triggered this pipeline.
      default: "N/A"
  workspaces:
    - name: checkout
      description: |
        This workspace contains the cloned repo files, so they can be read by the
        next task.
    - name: registry-credentials
      description: |
        This workspace contains the registry credentials, so they can be read by the
        next task.
    - name: maven-settings
      description: |
          This workspace contains the maven settings, so they can be read by the
          next task.
    - name: helm-config
      description: |
        This workspace contains the helm repository config.
        As the container has a read-only file system, the helm config is mounted as a workspace.
  results:
    - name: IMAGE_URL
      type: string
      description: The image that was built.
      value: $(tasks.kaniko-arm64.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      type: string
      description: The digest of the image that was built.
      value: $(tasks.kaniko-arm64.results.IMAGE_DIGEST)
    - name: VERSION
      description: The version of the image that was built.
      type: string
      value: $(tasks.git-next-tag.results.NEXT_TAG)
    - name: REPO_URL
      type: string
      value: $(tasks.fetch-source.results.url)
      description: The URL of the git repository that was cloned.
    - name: REPO_COMMIT_TIMESTAMP
      type: string
      value: $(tasks.fetch-source.results.committer-date)
      description: The branch of the git repository that was cloned.
    - name: REPO_COMMIT
      type: string
      value: $(tasks.fetch-source.results.commit)
      description: The commit of the git repository that was cloned.
    - name: COMMIT_MESSAGE
      type: string
      value: $(tasks.metadata-collection.results.COMMIT_MESSAGE)
    - name: COMMIT_AUTHOR
      type: string
      value: $(tasks.metadata-collection.results.COMMIT_AUTHOR)
    - name: COMMIT_AUTHOR_EMAIL
      type: string
      value: $(tasks.metadata-collection.results.COMMIT_AUTHOR_EMAIL)
    - name: COMMIT_TIMESTAMP
      type: string
      value: $(tasks.metadata-collection.results.COMMIT_TIMESTAMP)
  tasks:
    - name: metadata-collection
      taskRef:
        name: git-push-metadata-collector
      params:
        - name: commit_message
          value: $(params.commit_message)
        - name: commit_author
          value: $(params.commit_author)
        - name: commit_author_email
          value: $(params.commit_author_email)
        - name: commit_timestamp
          value: $(params.commit_timestamp)
    - name: fetch-source
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: checkout
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.gitrevision)
    - name: git-next-tag
      runAfter: ["fetch-source"]
      taskRef:
        name: git-next-tag
      workspaces:
        - name: source
          workspace: checkout
      params:
        - name: base
          value: $(params.base)
        - name: image
          value: $(params.image)
    - name: maven-run
      taskRef:
        name: maven
      runAfter: ["fetch-source"]
      params:
        - name: GOALS
          value:
            - clean
            - verify
            - -e
            - -C
            - -B
            - --show-version
            - --no-transfer-progress
        - name: MAVEN_IMAGE
          value: maven:3.9-eclipse-temurin-21
      workspaces:
        - name: maven-settings
          workspace: maven-settings
        - name: source
          workspace: checkout
    - name: create-and-push-git-tag
      runAfter: ["git-next-tag"]
      taskRef:
        name: github-create-tag
      workspaces:
        - name: source
          workspace: checkout
      params:
        - name: TAG
          value: $(tasks.git-next-tag.results.NEXT_TAG)
        - name: GITHUB_USERNAME
          value: tekton-bot
        - name: GITHUB_EMAIL
          value: joostvdg+tekton-bot@gmail.com
    - name: kaniko-arm64
      runAfter: ["git-next-tag"]
      taskRef:
        name: kaniko
      workspaces:
        - name: source
          workspace: checkout
        - name: dockerconfig
          workspace: registry-credentials
      params:
        - name: IMAGE
          value: "$(params.registry)/$(params.repo):$(tasks.git-next-tag.results.NEXT_TAG)"
        - name: DOCKERFILE
          value: $(params.dockerfile)
        - name: EXTRA_ARGS
          value: [--customPlatform=linux/arm64, --skip-tls-verify-registry=harbor.home.lab]
#    - name: kaniko-amd64
#      runAfter: ["git-next-tag"]
#      taskRef:
#        name: kaniko
#      workspaces:
#        - name: source
#          workspace: checkout
#        - name: dockerconfig
#          workspace: registry-credentials
#      params:
#        - name: IMAGE
#          value: "$(params.registry)/$(params.repo):$(tasks.git-next-tag.results.NEXT_TAG)"
#        - name: DOCKERFILE
#          value: $(params.dockerfile)
#        - name: EXTRA_ARGS
#          value: [--customPlatform=linux/amd64, --skip-tls-verify-registry=harbor.home.lab]
    - name: publish-helm-chart
      runAfter: ["git-next-tag"]
      taskRef:
        name: helm-publish-package
      workspaces:
        - name: source
          workspace: checkout
        - name: helm
          workspace: helm-config
      params:
        - name: HELM_CA_FILE_SECRET
          value: kearos-ca
        - name: REGISTRY_SECRET_NAME
          value: harbor-helm
        - name: PACKAGE_VERSION
          value: $(tasks.git-next-tag.results.NEXT_TAG)
        - name: HELM_CHART_VERSION
          value: $(tasks.git-next-tag.results.NEXT_TAG)
        - name: HELM_CHART_NAME
          value: ingress-dns-export-controller
        - name: HELM_CHART_DIR
          value: helm
        - name: HELM_REPO
          value: charts
        - name: HELM_REGISTRY_HOST
          value: "harbor.home.lab:443"
        - name: HELM_REGISTRY_URL
          value: "oci://harbor.home.lab:443"
  finally:
    - name: notify-build-failure
      when:
        - input: $(tasks.maven-run.status)
          operator: in
          values: ["Failed"]
      taskRef:
        name: send-to-webhook-slack
      params:
        - name: webhook-secret
          value: slack-webhook
        - name: message
          value: "Maven Build failed [$(params.repo-url) - $(params.gitrevision)] ---- $(tasks.maven-run.status)"
    - name: notify-fetch-failure
      when:
        - input: $(tasks.fetch-source.status)
          operator: in
          values: ["Failed"]
      taskRef:
        name: send-to-webhook-slack
      params:
        - name: webhook-secret
          value: slack-webhook
        - name: message
          value: "Cannot fetch source [$(params.repo-url) - $(params.gitrevision)] -----  $(tasks.fetch-source.status)"
    - name: notify-kaniko-arm-failure
      when:
        - input: $(tasks.kaniko-arm64.status)
          operator: in
          values: ["Failed"]
      taskRef:
        name: send-to-webhook-slack
      params:
        - name: webhook-secret
          value: slack-webhook
        - name: message
          value: "Kaniko ARM64 Build failed [$(params.repo-url) - $(params.gitrevision)] ------ $(tasks.kaniko-arm64.status)"
    - name: notify-helm-failure
      when:
        - input: $(tasks.publish-helm-chart.status)
          operator: in
          values: ["Failed"]
      taskRef:
        name: send-to-webhook-slack
      params:
        - name: webhook-secret
          value: slack-webhook
        - name: message
          value: "Helm Publish failed [$(params.repo-url) - $(params.gitrevision)] ----- $(tasks.publish-helm-chart.status)"